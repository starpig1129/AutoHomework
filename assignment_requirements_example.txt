# 作業要求規範檔案 - 資料結構程式設計作業範例
# 本檔案定義具體的作業評分標準和要求，供自動批改系統使用

## 作業基本資訊
**作業名稱**：鏈結串列實作與操作
**作業類型**：程式設計
**總分**：100分
**截止日期**：2025-01-15

## 評分項目與配分

### 項目1：核心功能實現
- **配分**：45分
- **評分標準**：
  - 完全實現鏈結串列的所有基本操作（插入、刪除、搜尋、顯示）：40-45分
  - 實現主要操作，有1-2個小缺陷：35-39分
  - 實現部分操作，缺少重要功能：25-34分
  - 基本架構正確但功能不完整：15-24分
  - 未實現或嚴重錯誤：0-14分

### 項目2：程式碼品質與規範
- **配分**：25分
- **評分標準**：
  - 程式碼清晰、變數命名規範、註解完整：23-25分
  - 程式碼結構良好，命名合理：20-22分
  - 程式碼可讀性一般，部分註解：15-19分
  - 程式碼難以理解，缺少註解：8-14分
  - 程式碼混亂，無註解：0-7分

### 項目3：記憶體管理與錯誤處理
- **配分**：20分
- **評分標準**：
  - 正確處理記憶體分配/釋放，完善的錯誤檢查：18-20分
  - 基本記憶體管理正確，有簡單錯誤處理：15-17分
  - 記憶體管理大致正確：10-14分
  - 有記憶體洩漏或錯誤處理不足：5-9分
  - 嚴重的記憶體問題：0-4分

### 項目4：測試與文件
- **配分**：10分
- **評分標準**：
  - 完整的測試案例和清晰的使用說明：9-10分
  - 基本測試和簡單說明：7-8分
  - 簡單測試或文件：5-6分
  - 測試或文件不足：2-4分
  - 缺乏測試和文件：0-1分

## 特殊要求

### 必要檔案清單
- [ ] 主程式檔案：linked_list.c 或 linked_list.cpp
- [ ] 標頭檔案：linked_list.h
- [ ] 測試程式：test_main.c 或 main.cpp
- [ ] 說明文件：README.md 或 report.pdf
- [ ] 編譯指令：Makefile 或 compile.txt

### 程式語言要求
**允許語言**：C, C++
**禁用語言**：Python, Java（本作業專注於記憶體管理）
**特殊庫限制**：不可使用STL容器類別（如vector, list）

### 輸入輸出格式
**輸入格式**：
```
第一行：操作數量 n (1 ≤ n ≤ 100)
接下來n行，每行一個操作：
- INSERT x：在串列末尾插入元素x
- DELETE x：刪除第一個值為x的節點
- SEARCH x：搜尋值為x的節點
- DISPLAY：顯示整個串列
```

**輸出格式**：
```
對於SEARCH操作：Found 或 Not Found
對於DISPLAY操作：以空格分隔的數字序列，如果串列為空則輸出 Empty
對於INSERT和DELETE：無輸出（除非錯誤）
```

## 扣分規則

### 格式扣分
- 檔案命名不符合規範：扣3分
- 輸出格式與要求不符：扣5-10分
- 編碼問題（如中文亂碼）：扣3分

### 規範扣分
- 使用禁用函式庫（如STL容器）：扣15分
- 程式無法編譯：扣20分
- 抄襲或高度相似：扣50-100分

### 功能扣分
- 程式執行時崩潰：扣15分
- 記憶體洩漏：扣10分
- 邊界條件處理錯誤：扣5-10分

## 加分項目

### 創新加分
- 實現額外功能（如反向顯示、排序）：+3-5分
- 優秀的使用者介面設計：+2-3分

### 品質加分
- 完善的記憶體洩漏檢測：+3分
- 詳細的單元測試：+2-4分
- 優秀的程式碼組織結構：+2分

## 範例測試案例

### 測試案例1：基本操作
**輸入**：
```
5
INSERT 10
INSERT 20
DISPLAY
SEARCH 10
DELETE 10
```
**預期輸出**：
```
10 20
Found
```

### 測試案例2：邊界情況
**輸入**：
```
3
SEARCH 999
DISPLAY
DELETE 100
```
**預期輸出**：
```
Not Found
Empty
```

### 測試案例3：複雜操作序列
**輸入**：
```
8
INSERT 1
INSERT 2
INSERT 3
DELETE 2
DISPLAY
INSERT 4
SEARCH 3
DISPLAY
```
**預期輸出**：
```
1 3
Found
1 3 4
```

## 評分注意事項

### 評分重點
1. **正確性**：程式能否正確執行所有要求的操作
2. **穩定性**：處理邊界情況和錯誤輸入的能力
3. **效率性**：基本操作的時間複雜度應該合理
4. **可維護性**：程式碼的清晰度和組織結構

### 常見錯誤預警
- 忘記釋放動態分配的記憶體
- 沒有檢查malloc/new是否成功
- 刪除不存在的元素時程式崩潰
- 空串列時的顯示操作處理不當

### 評分建議
- 優先檢查程式是否能正常編譯和執行
- 重點測試記憶體管理的正確性
- 注意邊界條件的處理
- 評估程式碼的可讀性和註解品質

---
**更新日期**：2025-01-10
**負責教師**：資料結構課程小組